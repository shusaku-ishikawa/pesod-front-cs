{"version":3,"sources":["webpack:///./src/views/ForClient/Diagnostic/Store/Product.vue","webpack:///./src/views/ForClient/Diagnostic/Store/Product.vue?a1f7","webpack:///./src/views/ForClient/Diagnostic/Store/Product.vue?0794","webpack:///./src/types/Product.ts"],"names":["products","length","cart","onUpdateCart","emits","props","type","Object","setup","context","fetchProducts","event","console","log","emit","value","render","useProducts","userType","product","client","get","data","getProduct","id"],"mappings":"yNAEU,EAAAA,SAASC,Q,yBADjB,yBAKe,G,MAHZD,SAAU,EAAAA,SACVE,KAAM,EAAAA,KACN,gBAAa,EAAAC,c,0HCCH,+BAAgB,CAM7BC,MAAO,CACL,eAEFC,MAAO,CACLH,KAAM,CACJI,KAAMC,SAGVC,MAd6B,SAcvBH,EAAYI,GAAqB,MAIjC,iBAFFT,EAFmC,EAEnCA,SACAU,EAHmC,EAGnCA,cAGIP,EAAe,SAACQ,GACpBC,QAAQC,IAAIF,GACZF,EAAQK,KAAK,cAAeH,IAM9B,OAHA,uBAAS,wCAAC,8GACeD,IADf,OACRV,EAASe,MADD,mDAGH,CACLf,WACAG,mBCjCN,EAAOa,OAASA,EAED,gB,sHCAD,SAAUC,IAAiC,IAArBC,EAAqB,uDAAV,WACvCC,EAAU,iBAAqB,MAC/BnB,EAAW,iBAAgB,IAFsB,EAKnD,eAASkB,GADXE,EAJqD,EAIrDA,OAEIV,EAAa,yDAAG,sHACGU,EAAOC,IAAI,cADd,uBACZC,EADY,EACZA,KACRV,QAAQC,IAAIS,GAFQ,kBAGbA,GAHa,2CAAH,qDAObC,EAAU,yDAAG,WAAOC,GAAP,gGACjBZ,QAAQC,IAAIW,GADK,SAEIJ,EAAOC,IAAP,mBAAuBG,IAF3B,uBAEVF,EAFU,EAEVA,KACPV,QAAQC,IAAIS,GAHK,kBAIVA,GAJU,2CAAH,sDAOhB,MAAO,CACLH,UACAnB,WACAU,gBACAa","file":"js/StoreProduct.265d184b.js","sourcesContent":["<template>\n  <router-view\n    v-if=\"products.length\"\n    :products=\"products\"\n    :cart=\"cart\"\n    @update:cart=\"onUpdateCart\"\n  ></router-view>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, onMounted, SetupContext } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { IProduct, ISubscription } from '@/types/Interfaces';\nimport useProducts from '@/types/Product';\n\nexport default defineComponent({\n  // props: {\n  //   subscription: {\n  //     type: Object as () => ISubscription\n  //   }\n  // },\n  emits: [\n    'update:cart',\n  ],\n  props: {\n    cart: {\n      type: Object as () => IProduct[]\n    }\n  },\n  setup(props: any, context: SetupContext) {\n    const {\n      products,\n      fetchProducts  \n    } = useProducts();\n\n    const onUpdateCart = (event: IProduct[]) => {\n      console.log(event)\n      context.emit('update:cart', event);\n    };\n\n    onMounted(async () => {\n      products.value = await fetchProducts();\n    })\n    return {\n      products,\n      onUpdateCart\n    }\n  }\n})\n</script>","\nimport { defineComponent, onMounted, SetupContext } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { IProduct, ISubscription } from '@/types/Interfaces';\nimport useProducts from '@/types/Product';\n\nexport default defineComponent({\n  // props: {\n  //   subscription: {\n  //     type: Object as () => ISubscription\n  //   }\n  // },\n  emits: [\n    'update:cart',\n  ],\n  props: {\n    cart: {\n      type: Object as () => IProduct[]\n    }\n  },\n  setup(props: any, context: SetupContext) {\n    const {\n      products,\n      fetchProducts  \n    } = useProducts();\n\n    const onUpdateCart = (event: IProduct[]) => {\n      console.log(event)\n      context.emit('update:cart', event);\n    };\n\n    onMounted(async () => {\n      products.value = await fetchProducts();\n    })\n    return {\n      products,\n      onUpdateCart\n    }\n  }\n})\n","import { render } from \"./Product.vue?vue&type=template&id=36073f5a\"\nimport script from \"./Product.vue?vue&type=script&lang=ts\"\nexport * from \"./Product.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { ref, computed } from 'vue';\nimport { IProduct } from './Interfaces';\nimport useAxios from '@/types/Axios';\n\n\nexport default function useProducts(userType = 'customer') {\n  const product = ref<IProduct | null>(null);\n  const products = ref<IProduct[]>([]);\n  const {\n    client  \n  } = useAxios(userType);\n  const fetchProducts = async (): Promise<IProduct[]> => {\n    const { data } = await client.get('/products/');\n    console.log(data);\n    return data;\n    \n  };\n  \n  const getProduct = async (id: string) => {\n    console.log(id)\n    const {data} = await client.get(`/product/${id}`);\n    console.log(data)\n    return data;\n  }\n  \n  return {\n    product,\n    products,\n    fetchProducts,\n    getProduct,\n  }\n}"],"sourceRoot":""}