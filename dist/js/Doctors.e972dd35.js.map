{"version":3,"sources":["webpack:///./src/views/ForClient/Diagnostic/Doctors.vue","webpack:///./src/views/ForClient/Diagnostic/Doctors.vue?6e42","webpack:///./src/views/ForClient/Diagnostic/Doctors.vue?89df","webpack:///./node_modules/core-js/modules/es.array.map.js","webpack:///./src/types/Prescript.ts"],"names":["myPrescript","components","setup","getPrescript","value","render","$","$map","map","arrayMethodHasSpeciesSupport","arrayMethodUsesToLength","HAS_SPECIES_SUPPORT","USES_TO_LENGTH","target","proto","forced","callbackfn","this","arguments","length","undefined","usePrescript","userType","client","prescripts","get","data","console","log","fixInterview","selectDoctor","doctorId","patch","doctor","fetchPrescripts","setPrescriptProducts","prescriptNo","products","prescriptProducts","p","product","id","acceptPrescriptProducts","deletePrescriptProducts","delete"],"mappings":"oNAEU,EAAAA,a,yBADR,yBAGe,G,MADZA,YAAa,EAAAA,a,sGCCH,+BAAgB,CAC7BC,WAAY,GAEZC,MAH6B,WAGxB,MAIC,iBAFFF,EAFC,EAEDA,YACAG,EAHC,EAGDA,aAKF,OAHA,uBAAS,wCAAC,8GACkBA,IADlB,OACRH,EAAYI,MADJ,mDAGH,CACLJ,kBCbN,EAAOK,OAASA,EAED,gB,kCCJf,IAAIC,EAAI,EAAQ,QACZC,EAAO,EAAQ,QAAgCC,IAC/CC,EAA+B,EAAQ,QACvCC,EAA0B,EAAQ,QAElCC,EAAsBF,EAA6B,OAEnDG,EAAiBF,EAAwB,OAK7CJ,EAAE,CAAEO,OAAQ,QAASC,OAAO,EAAMC,QAASJ,IAAwBC,GAAkB,CACnFJ,IAAK,SAAaQ,GAChB,OAAOT,EAAKU,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,O,gICU1D,SAAUC,IAAmC,IAArBC,EAAqB,uDAAV,WAAU,EAGrD,eAASA,GADXC,EAFuD,EAEvDA,OAEIvB,EAAc,iBAAuB,MACrCwB,EAAa,iBAAkB,IAE/BrB,EAAY,yDAAG,sHACEoB,EAAOE,IAAI,eADb,uBACZC,EADY,EACZA,KACPC,QAAQC,IAAIF,GAFO,kBAGZA,GAHY,2CAAH,qDAMZG,EAAY,yDAAG,sHACEN,EAAOE,IAAI,4BADb,uBACZC,EADY,EACZA,KADY,kBAEZA,GAFY,2CAAH,qDAKZI,EAAY,yDAAG,WAAOC,GAAP,yGACER,EAAOS,MAAM,2BAA4B,CAAEC,OAAQF,IADrD,uBACZL,EADY,EACZA,KADY,kBAEZA,GAFY,2CAAH,sDAKZQ,EAAe,yDAAG,sHACDX,EAAOE,IAAI,gBADV,uBACfC,EADe,EACfA,KACPC,QAAQC,IAAIF,GAFU,kBAGfA,GAHe,2CAAH,qDAMfS,EAAoB,yDAAG,WAAOC,EAAqBC,GAA5B,kGACrBC,EAAoBD,EAAS7B,KAAI,SAAC+B,GAAD,MAAkB,CAAEC,QAASD,EAAEE,OACtEd,QAAQC,IAAIU,GAFe,SAGNf,EAAOS,MAAP,qBAA2BI,GAAe,CAAEC,SAAUC,IAHhD,uBAGpBZ,EAHoB,EAGpBA,KACPC,QAAQC,IAAIF,GAJe,kBAKpBA,GALoB,2CAAH,wDAQpBgB,EAAuB,yDAAG,sHACTnB,EAAOS,MAAM,sBAAuB,IAD3B,uBACvBN,EADuB,EACvBA,KACPC,QAAQC,IAAIF,GAFkB,kBAGvBA,GAHuB,2CAAH,qDAMvBiB,EAAuB,yDAAG,WAAOP,GAAP,yGACTb,EAAOqB,OAAP,qBAA4BR,IADnB,uBACvBV,EADuB,EACvBA,KADuB,kBAEvBA,GAFuB,2CAAH,sDAO7B,MAAO,CAEL1B,cACAwB,aACArB,eACA0B,eACAC,eACAI,kBACAC,uBACAO,0BACAC","file":"js/Doctors.e972dd35.js","sourcesContent":["<template>  \n  <router-view\n    v-if=\"myPrescript\"\n    :myPrescript=\"myPrescript\"\n  ></router-view>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref } from 'vue';\nimport usePrescript from '@/types/Prescript';\n\nexport default defineComponent({\n  components: {\n  },\n  setup() {\n    const {\n      myPrescript,\n      getPrescript,\n    } = usePrescript();\n    onMounted(async () => {\n      myPrescript.value = await getPrescript()\n    })\n    return {\n      myPrescript,\n    };\n  }\n})\n</script>","\nimport { defineComponent, onMounted, ref } from 'vue';\nimport usePrescript from '@/types/Prescript';\n\nexport default defineComponent({\n  components: {\n  },\n  setup() {\n    const {\n      myPrescript,\n      getPrescript,\n    } = usePrescript();\n    onMounted(async () => {\n      myPrescript.value = await getPrescript()\n    })\n    return {\n      myPrescript,\n    };\n  }\n})\n","import { render } from \"./Doctors.vue?vue&type=template&id=27bcadce\"\nimport script from \"./Doctors.vue?vue&type=script&lang=ts\"\nexport * from \"./Doctors.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.es/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","\n\nimport { ComputedRef, computed, ref, WritableComputedRef } from 'vue';\nimport { IPrescript, IProduct } from '@/types/Interfaces';\nimport useAxios from '@/types/Axios';\n\n//const prescript: WritableComputedRef<IPrescript | null> = computed({\n  // get: () => {\n  //   const data = window.localStorage.getItem('prescript');\n  //   if (data) {\n  //     return JSON.parse(data);\n  //   } else {\n  //     return null;\n  //   }\n  // },\n  // set: (data: IPrescript | null) => {\n  //   if (data == null) {\n  //     window.localStorage.removeItem('prescript');\n  //     return;\n  //   }\n  //   window.localStorage.setItem('prescript', JSON.stringify(data))\n  // }\n// });\n\n\nexport default function usePrescript (userType = 'customer') {\n  const {\n    client\n  } = useAxios(userType);\n  const myPrescript = ref<IPrescript | null>(null);\n  const prescripts = ref<IPrescript[]>([]);\n\n  const getPrescript = async () => {\n    const {data} = await client.get('/prescript/');\n    console.log(data)\n    return data;\n  }\n\n  const fixInterview = async () => {\n    const {data} = await client.get('/prescript/interview_fix')\n    return data;\n  }\n\n  const selectDoctor = async (doctorId: number) => {\n    const {data} = await client.patch('/prescript/select_doctor', { doctor: doctorId })\n    return data; \n  }\n\n  const fetchPrescripts = async (): Promise<IPrescript[]> => {\n    const {data} = await client.get('/prescripts/')\n    console.log(data)\n    return data;\n  }\n\n  const setPrescriptProducts = async (prescriptNo: string, products: IProduct[]) => {\n    const prescriptProducts = products.map((p: IProduct) => ({ product: p.id }));\n    console.log(prescriptProducts)\n    const {data} = await client.patch(`/prescribe/${prescriptNo}`, { products: prescriptProducts });\n    console.log(data)\n    return data;\n  }\n\n  const acceptPrescriptProducts = async () => {\n    const {data} = await client.patch('/prescript/exam_fix', {});\n    console.log(data);\n    return data;\n  };\n\n  const deletePrescriptProducts = async (prescriptNo: string) => {\n    const {data} = await client.delete(`/prescribe/${prescriptNo}`);\n    return data;\n\n  }\n\n\n  return {\n    // prescript,\n    myPrescript,\n    prescripts,\n    getPrescript,\n    fixInterview,\n    selectDoctor,\n    fetchPrescripts,\n    setPrescriptProducts,\n    acceptPrescriptProducts,\n    deletePrescriptProducts\n    \n  }\n}"],"sourceRoot":""}