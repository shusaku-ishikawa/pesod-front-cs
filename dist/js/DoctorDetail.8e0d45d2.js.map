{"version":3,"sources":["webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail.vue","webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail.vue?cd97","webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail.vue?c0f8","webpack:///./src/types/Doctor.ts"],"names":["doctor","components","props","myPrescript","type","Object","setup","route","id","params","dId","Array","isArray","parseInt","getDoctor","dataReady","value","response","data","status","alert","JSON","stringify","console","error","render","fetchDoctors","get","results","useDoctors","doctors"],"mappings":"0MAEgB,MAAN,EAAAA,Q,iBADR,eAGe,G,MADZA,OAAQ,EAAAA,Q,4FCIE,iBAAgB,CAC7BC,WAAY,GAEZC,MAAO,CACLC,YAAa,CACXC,KAAMC,SAGVC,MAR6B,WAU3B,IAAMC,EAAQ,iBACPC,EAAMD,EAAME,OAAZD,GACDE,EAAMC,MAAMC,QAAQJ,GAAMK,SAASL,EAAG,IAAMK,SAASL,GAJxD,EASC,iBAFFR,EAPC,EAODA,OACAc,EARC,EAQDA,UAGIC,EAAY,gBAAI,GAetB,OAbA,eAAS,wCAAC,+HAEeD,EAAUJ,GAFzB,OAENV,EAAOgB,MAFD,OAGND,EAAUC,OAAQ,EAHZ,mDAKAC,EAAW,KAAIA,SACjBA,IACKC,EAAgBD,EAAhBC,KAAgBD,EAAVE,OACbC,MAAMC,KAAKC,UAAUJ,KAEvBK,QAAQC,MAAR,MAVM,0DAaH,CACLxB,SACAe,gBCxCN,EAAOU,OAASA,EAED,gB,wHCDTC,EAAY,yDAAG,wHACI,OAAOC,IAAI,aADf,uBACXT,EADW,EACXA,KACAU,EAAYV,EAAZU,QAFW,kBAGZA,GAHY,2CAAH,qDAMZd,EAAS,yDAAG,WAAON,GAAP,yGACO,OAAOmB,IAAP,kBAAsBnB,IAD7B,uBACRU,EADQ,EACRA,KADQ,kBAETA,GAFS,2CAAH,sDASD,SAAUW,IACtB,IAAMC,EAAU,eAAe,IACzB9B,EAAS,eAAoB,MAEnC,MAAO,CAELA,SACA8B,UACAhB,YACAY","file":"js/DoctorDetail.8e0d45d2.js","sourcesContent":["<template>\n  <router-view\n    v-if=\"doctor != null\"\n    :doctor=\"doctor\"\n  ></router-view>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref } from 'vue';\nimport { useRoute } from 'vue-router';\n\nimport useDoctors from '@/types/Doctor';\nimport { IPrescript } from '@/types/Interfaces';\n\nexport default defineComponent({\n  components: {\n  },\n  props: {\n    myPrescript: {\n      type: Object as () => IPrescript\n    }\n  },\n  setup() {\n\n    const route = useRoute();\n    const {id} = route.params;\n    const dId = Array.isArray(id) ? parseInt(id[0]) : parseInt(id);\n    \n    const {\n      doctor,\n      getDoctor,\n    } = useDoctors();\n    \n    const dataReady = ref(false);\n    \n    onMounted(async () => {\n      try {\n        doctor.value = await getDoctor(dId);\n        dataReady.value = true\n      } catch (err) {\n        const response = err.response;\n        if (response) {\n          const {data, status} = response;\n          alert(JSON.stringify(data))\n        }\n        console.error(err)\n      }\n    })\n    return {\n      doctor,\n      dataReady\n    }\n  }\n})\n</script>","\nimport { defineComponent, onMounted, ref } from 'vue';\nimport { useRoute } from 'vue-router';\n\nimport useDoctors from '@/types/Doctor';\nimport { IPrescript } from '@/types/Interfaces';\n\nexport default defineComponent({\n  components: {\n  },\n  props: {\n    myPrescript: {\n      type: Object as () => IPrescript\n    }\n  },\n  setup() {\n\n    const route = useRoute();\n    const {id} = route.params;\n    const dId = Array.isArray(id) ? parseInt(id[0]) : parseInt(id);\n    \n    const {\n      doctor,\n      getDoctor,\n    } = useDoctors();\n    \n    const dataReady = ref(false);\n    \n    onMounted(async () => {\n      try {\n        doctor.value = await getDoctor(dId);\n        dataReady.value = true\n      } catch (err) {\n        const response = err.response;\n        if (response) {\n          const {data, status} = response;\n          alert(JSON.stringify(data))\n        }\n        console.error(err)\n      }\n    })\n    return {\n      doctor,\n      dataReady\n    }\n  }\n})\n","import { render } from \"./Detail.vue?vue&type=template&id=45648e97\"\nimport script from \"./Detail.vue?vue&type=script&lang=ts\"\nexport * from \"./Detail.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { ref, computed } from 'vue';\nimport { IDoctor } from './Interfaces';\nimport { client } from './Axios';\n\nconst fetchDoctors = async (): Promise<IDoctor[]> => {\n  const { data } = await client.get('/doctors/');\n  const { results } = data;\n  return results\n}\n\nconst getDoctor = async (id: number): Promise<IDoctor> => {\n  const { data } = await client.get(`/doctor/${id}`);\n  return data;\n}\n\n\n// const myDoctor = computed(() => {\n//   return doctors.value.find(d => d.id===1);\n// })\nexport default function useDoctors() {\n  const doctors = ref<IDoctor[]>([]);\n  const doctor = ref<IDoctor | null>(null);\n\n  return {\n    // myDoctor,\n    doctor,\n    doctors,\n    getDoctor,\n    fetchDoctors\n  }\n}"],"sourceRoot":""}