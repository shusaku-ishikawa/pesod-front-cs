{"version":3,"sources":["webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail/Chat.vue","webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail/Chat.vue?2164","webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail/Chat.vue?9d4f","webpack:///./src/views/ForClient/Diagnostic/Doctors/Detail/Chat.vue?67ec","webpack:///./src/types/Doctor.ts"],"names":["class","fill-rule","d","clip-rule","ref","style","xmlns","viewBox","fill","myPrescript","title","router","push","doctor","image","src","alt","first_name","last_name","wsState","chatLogs","length","dateStr","created_at","log","i","getDate","chatLog","isMyMessage","speaker","customer","id","prescript_products","status","message","onSendMessage","menu","onAccept","onDeny","sendMessage","showMessageTemplates","customerMessageTemplates","t","onSelectTemplate","key","components","ChatMessageCard","ChatForm","WsStateMarker","ChatDateLabel","props","type","Object","setup","context","getToken","getPrescript","acceptPrescriptProducts","deletePrescriptProducts","doctors","fetchDoctors","fetchDoctorChatLogs","fetchCustomerMessageTemplates","WS_BASE_URL","connection","close","connect","messageArea","scrollDown","wsStateStr","prepareWs","value","messageStr","readyState","OPEN","messageJson","uuid","send","JSON","stringify","prescript_no","trim","onMessageReceivedCallback","includes","replace","name","data","console","error","response","url","access","window","setTimeout","format","render","__scopeId","get","results","getDoctor","useDoctors"],"mappings":"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","file":"js/DoctorDetailChat.c67aa580.js","sourcesContent":["<template>\n  <base-layout v-if=\"myPrescript\">\n    <template v-slot:title>\n      <div class=\"\">\n        <svg\n          @click=\"() => { router.push({ name: 'DiagnosticTop' }) }\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"absolute h-6 w-6 cursor-pointer\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n        </svg>\n        <div>\n          診察ルーム\n        </div>\n      </div>\n    </template>\n    <!-- <div class=\"flex-grow flex flex-col\"> -->\n    \n    <div\n      ref=\"messageArea\"\n      class=\"relative overflow-y-auto flex-grow \"\n    >\n       <page-title class=\"mb-3\">\n          <div class=\"flex items-center\">\n            <div>診察室</div>\n            <div class=\"flex items-center text-sm ml-2\">\n              <div>[</div>\n              <img\n                v-if=\"doctor.image\"\n                :src=\"doctor.image\"\n                alt=\"doctor\"\n                style=\"height: 30px; width: 30px\"\n              >\n              <svg\n                v-else\n                style=\"height: 30px; width: 30px\"\n                xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clip-rule=\"evenodd\" />\n              </svg>\n              <div class=\"px-2\">\n                {{ doctor.first_name }} {{ doctor.last_name }}\n              </div>\n              <div>]</div>\n            </div>\n          </div>\n          \n          <ws-state-marker\n            :wsState=\"wsState\"\n          ></ws-state-marker>\n      </page-title>\n    \n      <div class=\"absolute w-full space-y-4 pb-5\">\n        \n        <chat-date-label\n          v-if=\"chatLogs.length > 0\"\n          :dateStr=\"chatLogs[0].created_at\"\n        ></chat-date-label>\n        <template\n          v-for=\"(log, i) in chatLogs\"\n          :key=\"i\"\n        >\n         \n          <chat-date-label\n            v-if=\"i > 1 && getDate(chatLogs[i].created_at) !== getDate(chatLogs[i - 1].created_at)\"\n            :dateStr=\"log.created_at\"\n          ></chat-date-label>\n          <chat-message-card\n          :chatLog=\"log\"\n          :isMyMessage=\"log.speaker === myPrescript.customer.id\"\n          ></chat-message-card>\n          \n        </template>\n        \n        <!-- <div\n          class=\"px-2\"\n          v-if=\"myPrescript.prescript_products.length\" \n        >\n          <div\n            class=\"bg-blue-400 text-white\"\n          >\n            処方提案を受けています\n          </div>\n          <div\n            class=\"flex items-center\"\n          >\n            <button\n              @click=\"onAcceptPrescriptProducts\"\n              class=\"bg-blue-400 text-white \"\n            >\n              承諾\n            </button>\n            <button\n              class=\"bg-gray-200 ml-2\"\n            >\n              拒否\n            </button>\n            \n          </div>\n        </div> -->\n      </div>\n    </div>\n    <!--  -->\n    <div\n      v-if=\"myPrescript.prescript_products.length && myPrescript.status >= 4\"\n      class=\"bg-gray-100 text-center py-3\"\n    >\n      <div class=\"text-lg\">診察は終了です。</div>\n      <div>「<span class=\"text-blue-400 cursor-pointer\" @click=\"router.push({ name: 'DiagnosticTop' })\">お手続きメニュー</span>」へ戻る </div>\n    </div>\n    <chat-form\n      v-if=\"myPrescript.status == 3\"\n      v-model=\"message\"\n      @send=\"onSendMessage\"\n    >\n      <template v-slot:menu>\n        <button\n          @click=\"onAccept\"\n          class=\"rounded border text-sm \">\n          はい\n        </button>\n        <button\n          @click=\"onDeny\"\n          class=\"rounded border text-sm\">\n          いいえ\n        </button>\n        <button\n          @click=\"sendMessage('承知しました')\"\n          class=\"rounded border text-sm\">\n          承知しました\n        </button>\n      \n        <!-- <button\n          @click=\"showMessageTemplates = !showMessageTemplates\"\n          class=\"border rounded-lg py-1 text-sm flex items-center\"\n        >\n          <div>テンプレート</div>\n          <svg\n            v-if=\"!showMessageTemplates\"\n            class=\"h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n          <svg\n            v-else\n            class=\"h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </button> -->\n      </template> \n    </chat-form>\n    <div\n      v-if=\"showMessageTemplates\"\n      style=\"height: 100px\"\n      class=\"relative overflow-y-scroll\"\n    >\n      <ul\n        v-if=\"customerMessageTemplates.length\"\n        class=\"absolute w-full\"\n      >\n        <li\n          @click=\"onSelectTemplate(t)\"\n          v-for=\"(t, i) in customerMessageTemplates\"\n          :key=\"i\"\n          class=\"border-b border-gray-100 hover:bg-gray-50\"\n        >\n          {{ t.message }}\n        </li>\n      </ul>\n      <div\n        v-else\n      >\n        テンプレートがありません。\n      </div>\n    </div>\n    <!-- </div> -->\n  </base-layout>\n</template>\n<style lang=\"scss\" scoped>\n  div.date {\n    padding: 0 10px;\n  }\n  div.date:before,\n  div.date:after {\n     content: \"\";\n     flex: 1 1;\n     border-bottom: 1px solid lightgray;\n     margin: auto;\n}\n</style>\n<script lang=\"ts\">\nimport { callWithErrorHandling, computed, defineComponent, onBeforeMount, onBeforeUnmount, onMounted, ref, SetupContext } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport useChatLog from '@/types/ChatLog';\nimport useDoctor from '@/types/Doctor';\nimport useSocket from '@/types/Socket';\n\nimport ChatMessageCard from './Chat/MessageCard.vue';\nimport ChatForm from './Chat/Form.vue';\nimport { IDoctor, IChatMessage, IMessageTemplate, IPrescript } from '@/types/Interfaces';\nimport usePrescript from '@/types/Prescript';\nimport useAuth from '@/types/Auth';\n\nimport WsStateMarker from '@/components/WsStateMarker.vue';\n\nimport moment from 'moment';\n\nimport ChatDateLabel from './Chat/DateLabel.vue';\n\nexport default defineComponent({\n  components: {\n    ChatMessageCard,\n    ChatForm,\n    WsStateMarker,\n    ChatDateLabel\n  },\n  props: {\n    doctor: {\n      type: Object as () => IDoctor\n    },\n    \n  },\n  setup(props: any, context: SetupContext) {\n    const route = useRoute();\n    const router = useRouter();\n\n    const {\n      getToken\n    } = useAuth();\n\n    const {\n      myPrescript,\n      getPrescript,\n      acceptPrescriptProducts,\n      deletePrescriptProducts\n    } = usePrescript();\n\n    const {\n      doctors,\n      fetchDoctors\n    } = useDoctor();\n\n    const {\n      chatLogs,\n      fetchDoctorChatLogs,\n      fetchCustomerMessageTemplates\n    } = useChatLog();\n    \n    const {\n      WS_BASE_URL,\n      connection,\n      connect,\n      close,\n      messageArea,\n      scrollDown,\n      wsState,\n      wsStateStr,\n      message,\n      prepareWs\n    } = useSocket();\n    \n\n    const customerMessageTemplates = ref<IMessageTemplate[]>([]);\n    const showMessageTemplates = ref(false);\n    const onSelectTemplate = (t: IMessageTemplate) => {\n      // message.value = m;\n      showMessageTemplates.value = false;\n    };\n    \n\n    // alert(JSON.stringify(myPrescript.value))\n    \n    const sendMessage = (messageStr: string) => {\n      if (myPrescript.value == null) return;\n      if (connection.value == null) return;\n      if (connection.value.readyState === connection.value.OPEN) {\n        // send message\n        // messageJson\n        const messageJson: IChatMessage = {\n          uuid: myPrescript.value.customer.uuid,\n          message: messageStr,\n        };\n        connection.value.send(JSON.stringify(messageJson));\n      }\n    }\n    \n    const onAccept = async () => {\n      if (myPrescript.value == null) return;\n      if (myPrescript.value.prescript_products?.length) {\n        // accept\n        const data = await acceptPrescriptProducts();\n      }\n      myPrescript.value = await getPrescript();\n\n      sendMessage('はい')\n    };\n    const onDeny = async () => {\n      if (myPrescript.value == null) return;\n      if (myPrescript.value.prescript_products?.length) {\n        const data = await deletePrescriptProducts(myPrescript.value.prescript_no);\n      }\n      myPrescript.value = await getPrescript();\n      sendMessage('いいえ')\n    }\n    \n    const onSendMessage = () => {\n      if (!message.value.trim()) return;\n      sendMessage(message.value);\n      message.value = '';\n    };\n\n    const onMessageReceivedCallback = async (messageJson: IChatMessage) => {\n      if (messageJson.message.includes('table')) {\n        \n        myPrescript.value = await getPrescript();\n        // if (data.prescript_products.length > 0) {\n          \n        // }\n      }  \n    };\n\n    onMounted(async () => {\n      myPrescript.value = await getPrescript();\n\n      customerMessageTemplates.value = await fetchCustomerMessageTemplates();\n\n      if (myPrescript.value == null) return;\n      if (myPrescript.value.status != 3) {\n        router.replace({ name: 'DiagnosticTop' })\n      }\n      try {\n        const data = await fetchDoctorChatLogs(myPrescript.value.id);  \n        chatLogs.value = data;\n      } catch (err) {\n        console.error(err.response)\n        return;\n      }\n      const url = `${WS_BASE_URL}/chat/doctor/${myPrescript.value?.customer.uuid}/?token=${getToken()?.access}`;\n    \n      prepareWs(url, chatLogs, onMessageReceivedCallback);\n      window.setTimeout(() => {\n        scrollDown();\n      }, 100)\n      \n    });\n\n    onBeforeUnmount(() => {\n      // alert('closing socket')\n      close();\n    })\n\n    const getDate = (dateStr: string) => {\n      return moment(dateStr).format('yyyy/MM/DD')\n    }\n\n   \n    return {\n      sendMessage,\n      myPrescript,\n      connection,\n      router,\n      messageArea,\n      message,\n      chatLogs,\n      onSendMessage,\n      wsState,\n      wsStateStr,\n      getDate,\n      onSelectTemplate,\n      customerMessageTemplates,\n      showMessageTemplates,\n      onDeny,\n      onAccept\n    };\n  }\n})\n</script>","\nimport { callWithErrorHandling, computed, defineComponent, onBeforeMount, onBeforeUnmount, onMounted, ref, SetupContext } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport useChatLog from '@/types/ChatLog';\nimport useDoctor from '@/types/Doctor';\nimport useSocket from '@/types/Socket';\n\nimport ChatMessageCard from './Chat/MessageCard.vue';\nimport ChatForm from './Chat/Form.vue';\nimport { IDoctor, IChatMessage, IMessageTemplate, IPrescript } from '@/types/Interfaces';\nimport usePrescript from '@/types/Prescript';\nimport useAuth from '@/types/Auth';\n\nimport WsStateMarker from '@/components/WsStateMarker.vue';\n\nimport moment from 'moment';\n\nimport ChatDateLabel from './Chat/DateLabel.vue';\n\nexport default defineComponent({\n  components: {\n    ChatMessageCard,\n    ChatForm,\n    WsStateMarker,\n    ChatDateLabel\n  },\n  props: {\n    doctor: {\n      type: Object as () => IDoctor\n    },\n    \n  },\n  setup(props: any, context: SetupContext) {\n    const route = useRoute();\n    const router = useRouter();\n\n    const {\n      getToken\n    } = useAuth();\n\n    const {\n      myPrescript,\n      getPrescript,\n      acceptPrescriptProducts,\n      deletePrescriptProducts\n    } = usePrescript();\n\n    const {\n      doctors,\n      fetchDoctors\n    } = useDoctor();\n\n    const {\n      chatLogs,\n      fetchDoctorChatLogs,\n      fetchCustomerMessageTemplates\n    } = useChatLog();\n    \n    const {\n      WS_BASE_URL,\n      connection,\n      connect,\n      close,\n      messageArea,\n      scrollDown,\n      wsState,\n      wsStateStr,\n      message,\n      prepareWs\n    } = useSocket();\n    \n\n    const customerMessageTemplates = ref<IMessageTemplate[]>([]);\n    const showMessageTemplates = ref(false);\n    const onSelectTemplate = (t: IMessageTemplate) => {\n      // message.value = m;\n      showMessageTemplates.value = false;\n    };\n    \n\n    // alert(JSON.stringify(myPrescript.value))\n    \n    const sendMessage = (messageStr: string) => {\n      if (myPrescript.value == null) return;\n      if (connection.value == null) return;\n      if (connection.value.readyState === connection.value.OPEN) {\n        // send message\n        // messageJson\n        const messageJson: IChatMessage = {\n          uuid: myPrescript.value.customer.uuid,\n          message: messageStr,\n        };\n        connection.value.send(JSON.stringify(messageJson));\n      }\n    }\n    \n    const onAccept = async () => {\n      if (myPrescript.value == null) return;\n      if (myPrescript.value.prescript_products?.length) {\n        // accept\n        const data = await acceptPrescriptProducts();\n      }\n      myPrescript.value = await getPrescript();\n\n      sendMessage('はい')\n    };\n    const onDeny = async () => {\n      if (myPrescript.value == null) return;\n      if (myPrescript.value.prescript_products?.length) {\n        const data = await deletePrescriptProducts(myPrescript.value.prescript_no);\n      }\n      myPrescript.value = await getPrescript();\n      sendMessage('いいえ')\n    }\n    \n    const onSendMessage = () => {\n      if (!message.value.trim()) return;\n      sendMessage(message.value);\n      message.value = '';\n    };\n\n    const onMessageReceivedCallback = async (messageJson: IChatMessage) => {\n      if (messageJson.message.includes('table')) {\n        \n        myPrescript.value = await getPrescript();\n        // if (data.prescript_products.length > 0) {\n          \n        // }\n      }  \n    };\n\n    onMounted(async () => {\n      myPrescript.value = await getPrescript();\n\n      customerMessageTemplates.value = await fetchCustomerMessageTemplates();\n\n      if (myPrescript.value == null) return;\n      if (myPrescript.value.status != 3) {\n        router.replace({ name: 'DiagnosticTop' })\n      }\n      try {\n        const data = await fetchDoctorChatLogs(myPrescript.value.id);  \n        chatLogs.value = data;\n      } catch (err) {\n        console.error(err.response)\n        return;\n      }\n      const url = `${WS_BASE_URL}/chat/doctor/${myPrescript.value?.customer.uuid}/?token=${getToken()?.access}`;\n    \n      prepareWs(url, chatLogs, onMessageReceivedCallback);\n      window.setTimeout(() => {\n        scrollDown();\n      }, 100)\n      \n    });\n\n    onBeforeUnmount(() => {\n      // alert('closing socket')\n      close();\n    })\n\n    const getDate = (dateStr: string) => {\n      return moment(dateStr).format('yyyy/MM/DD')\n    }\n\n   \n    return {\n      sendMessage,\n      myPrescript,\n      connection,\n      router,\n      messageArea,\n      message,\n      chatLogs,\n      onSendMessage,\n      wsState,\n      wsStateStr,\n      getDate,\n      onSelectTemplate,\n      customerMessageTemplates,\n      showMessageTemplates,\n      onDeny,\n      onAccept\n    };\n  }\n})\n","import { render } from \"./Chat.vue?vue&type=template&id=41209d0e&scoped=true\"\nimport script from \"./Chat.vue?vue&type=script&lang=ts\"\nexport * from \"./Chat.vue?vue&type=script&lang=ts\"\n\nimport \"./Chat.vue?vue&type=style&index=0&id=41209d0e&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-41209d0e\"\n\nexport default script","export * from \"-!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Chat.vue?vue&type=style&index=0&id=41209d0e&lang=scss&scoped=true\"","import { ref, computed } from 'vue';\nimport { IDoctor } from './Interfaces';\nimport { client } from './Axios';\n\nconst fetchDoctors = async (): Promise<IDoctor[]> => {\n  const { data } = await client.get('/doctors/');\n  const { results } = data;\n  return results\n}\n\nconst getDoctor = async (id: number): Promise<IDoctor> => {\n  const { data } = await client.get(`/doctor/${id}`);\n  return data;\n}\n\n\n// const myDoctor = computed(() => {\n//   return doctors.value.find(d => d.id===1);\n// })\nexport default function useDoctors() {\n  const doctors = ref<IDoctor[]>([]);\n  const doctor = ref<IDoctor | null>(null);\n\n  return {\n    // myDoctor,\n    doctor,\n    doctors,\n    getDoctor,\n    fetchDoctors\n  }\n}"],"sourceRoot":""}