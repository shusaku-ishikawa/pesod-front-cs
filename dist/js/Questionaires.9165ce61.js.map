{"version":3,"sources":["webpack:///./src/types/Questionaire.ts","webpack:///./src/types/Prescript.ts","webpack:///./src/views/ForClient/Diagnostic/Questionaires.vue","webpack:///./src/views/ForClient/Diagnostic/Questionaires.vue?447d","webpack:///./src/views/ForClient/Diagnostic/Questionaires.vue?f6cc"],"names":["useQuestionaire","questions","fetchQuestions","get","data","console","log","results","getPrescript","fixInterview","selectDoctor","doctorId","patch","doctor","fetchPrescripts","setPrescriptProducts","prescriptNo","products","prescriptProducts","map","p","product","id","acceptPrescriptProducts","usePrescript","myPrescript","prescripts","class","title","length","key","$route","fullPath","components","setup","router","value","status","push","name","render"],"mappings":"mMAIc,SAAUA,IACtB,IAAMC,EAAY,eAAiB,IAE7BC,EAAc,yDAAG,sHACE,OAAOC,IAAI,eADb,uBACbC,EADa,EACbA,KACRC,QAAQC,IAAIF,GAFS,kBAGdA,EAAKG,SAHS,2CAAH,qDAOpB,MAAO,CACLN,YACAC,oB,gICQEM,EAAY,yDAAG,sHACE,OAAOL,IAAI,eADb,uBACZC,EADY,EACZA,KACPC,QAAQC,IAAIF,GAFO,kBAGZA,GAHY,2CAAH,qDAMZK,EAAY,yDAAG,sHACE,OAAON,IAAI,4BADb,uBACZC,EADY,EACZA,KADY,kBAEZA,GAFY,2CAAH,qDAKZM,EAAY,yDAAG,WAAOC,GAAP,yGACE,OAAOC,MAAM,2BAA4B,CAAEC,OAAQF,IADrD,uBACZP,EADY,EACZA,KADY,kBAEZA,GAFY,2CAAH,sDAKZU,EAAe,yDAAG,sHACD,OAAOX,IAAI,gBADV,uBACfC,EADe,EACfA,KACPC,QAAQC,IAAIF,GAFU,kBAGfA,EAAKG,SAHU,2CAAH,qDAMfQ,EAAoB,yDAAG,WAAOC,EAAqBC,GAA5B,kGACrBC,EAAoBD,EAASE,KAAI,SAACC,GAAD,MAAkB,CAAEC,QAASD,EAAEE,OACtEjB,QAAQC,IAAIY,GAFe,SAGN,OAAON,MAAP,qBAA2BI,GAAe,CAAEC,SAAUC,IAHhD,uBAGpBd,EAHoB,EAGpBA,KACPC,QAAQC,IAAIF,GAJe,kBAKpBA,GALoB,2CAAH,wDAQpBmB,EAAuB,yDAAG,sHACT,OAAOX,MAAM,sBAAuB,IAD3B,uBACvBR,EADuB,EACvBA,KACPC,QAAQC,IAAIF,GAFkB,kBAGvBA,GAHuB,2CAAH,qDAMf,SAAUoB,IACtB,IAAMC,EAAc,eAAuB,MACrCC,EAAa,eAAkB,IAErC,MAAO,CAELD,cACAC,aACAlB,eACAC,eACAC,eACAI,kBACAC,uBACAQ,6B,0ECtEc,S,GAITI,MAAM,2B,mJANb,eAcc,QAbKC,MAAK,gBACpB,iBAEa,CAFb,eAEa,Q,wBAFD,iBAEZ,C,wCAEF,iBAOM,CAPN,eAOM,MAPN,EAOM,CAHe,MAAX,EAAAH,aAAuB,EAAAxB,UAAU4B,OAAM,G,iBAH/C,eAKe,GAJZJ,YAAa,EAAAA,YACbxB,UAAW,EAAAA,UAEX6B,IAAK,EAAAC,OAAOC,U,qICLN,iBAAgB,CAC7BC,WAAY,GAEZC,MAH6B,WAI3B,IAAMC,EAAS,iBADZ,EAKC,iBAFFV,EAHC,EAGDA,YACAjB,EAJC,EAIDA,aAJC,EAUC,iBAFFP,EARC,EAQDA,UACAC,EATC,EASDA,eAeF,OAZA,eAAS,wCAAC,oHACkBM,IADlB,cACRiB,EAAYW,MADJ,gBAEWlC,IAFX,OAEFE,EAFE,OAGRH,EAAUmC,MAAQhC,EAHV,4CAMV,gBAAU,WAAK,MACoB,IAA7B,UAAAqB,EAAYW,aAAZ,eAAmBC,SACrBF,EAAOG,KAAK,CAAEC,KAAM,qBAIjB,CACLd,cACAxB,gBCjCN,EAAOuC,OAASA,EAED","file":"js/Questionaires.9165ce61.js","sourcesContent":["import { ref, computed } from 'vue';\nimport { IQuestion, IAnswer } from './Interfaces';\nimport { client } from '@/types/Axios';\n\nexport default function useQuestionaire() {\n  const questions = ref<IQuestion[]>([]);\n  \n  const fetchQuestions = async (): Promise<IQuestion[]> => {\n    const { data } = await client.get('/questions/');\n    console.log(data);\n    return data.results;\n    \n  };\n  \n  return {\n    questions,\n    fetchQuestions\n  }\n}","\n\nimport { ComputedRef, computed, ref, WritableComputedRef } from 'vue';\nimport { IPrescript, IProduct } from '@/types/Interfaces';\nimport { client } from '@/types/Axios';\n\n//const prescript: WritableComputedRef<IPrescript | null> = computed({\n  // get: () => {\n  //   const data = window.localStorage.getItem('prescript');\n  //   if (data) {\n  //     return JSON.parse(data);\n  //   } else {\n  //     return null;\n  //   }\n  // },\n  // set: (data: IPrescript | null) => {\n  //   if (data == null) {\n  //     window.localStorage.removeItem('prescript');\n  //     return;\n  //   }\n  //   window.localStorage.setItem('prescript', JSON.stringify(data))\n  // }\n// });\n\nconst getPrescript = async () => {\n  const {data} = await client.get('/prescript/');\n  console.log(data)\n  return data;\n}\n\nconst fixInterview = async () => {\n  const {data} = await client.get('/prescript/interview_fix')\n  return data;\n}\n\nconst selectDoctor = async (doctorId: number) => {\n  const {data} = await client.patch('/prescript/select_doctor', { doctor: doctorId })\n  return data; \n}\n\nconst fetchPrescripts = async (): Promise<IPrescript[]> => {\n  const {data} = await client.get('/prescripts/')\n  console.log(data)\n  return data.results;\n}\n\nconst setPrescriptProducts = async (prescriptNo: string, products: IProduct[]) => {\n  const prescriptProducts = products.map((p: IProduct) => ({ product: p.id }));\n  console.log(prescriptProducts)\n  const {data} = await client.patch(`/prescribe/${prescriptNo}`, { products: prescriptProducts });\n  console.log(data)\n  return data;\n}\n\nconst acceptPrescriptProducts = async () => {\n  const {data} = await client.patch('/prescript/exam_fix', {});\n  console.log(data);\n  return data;\n};\n\nexport default function usePrescript () {\n  const myPrescript = ref<IPrescript | null>(null);\n  const prescripts = ref<IPrescript[]>([]);\n\n  return {\n    // prescript,\n    myPrescript,\n    prescripts,\n    getPrescript,\n    fixInterview,\n    selectDoctor,\n    fetchPrescripts,\n    setPrescriptProducts,\n    acceptPrescriptProducts,\n    \n  }\n}","<template>\n  <base-layout>\n    <template v-slot:title>\n      <page-title>\n        問診表\n      </page-title>\n    </template>\n    <div class=\"flex-grow flex flex-col\">\n      <router-view\n        :myPrescript=\"myPrescript\"\n        :questions=\"questions\"\n        v-if=\"myPrescript != null && questions.length > 0\"\n        :key=\"$route.fullPath\"\n      ></router-view>\n    </div>\n  </base-layout>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, isProxy, onMounted, onUpdated, ref } from 'vue';\nimport useQuestionaire from '@/types/Questionaire';\nimport { IQuestion } from '@/types/Interfaces';\nimport usePrescript from '@/types/Prescript'\nimport { useRouter } from 'vue-router';\n\nexport default defineComponent({\n  components: {\n  },\n  setup() {\n    const router = useRouter();\n    const {\n      myPrescript,\n      getPrescript,\n    } = usePrescript();\n\n    const {\n      questions,\n      fetchQuestions,\n    } = useQuestionaire();\n  \n    onMounted(async () => {\n      myPrescript.value = await getPrescript();\n      const data = await fetchQuestions();\n      questions.value = data;\n    });\n    \n    onUpdated(() => {\n      if (myPrescript.value?.status != 1) {\n        router.push({ name: 'DiagnosticTop' })\n      }\n    })\n   \n    return {\n      myPrescript,\n      questions,\n    };\n  }\n})\n</script>","\nimport { defineComponent, isProxy, onMounted, onUpdated, ref } from 'vue';\nimport useQuestionaire from '@/types/Questionaire';\nimport { IQuestion } from '@/types/Interfaces';\nimport usePrescript from '@/types/Prescript'\nimport { useRouter } from 'vue-router';\n\nexport default defineComponent({\n  components: {\n  },\n  setup() {\n    const router = useRouter();\n    const {\n      myPrescript,\n      getPrescript,\n    } = usePrescript();\n\n    const {\n      questions,\n      fetchQuestions,\n    } = useQuestionaire();\n  \n    onMounted(async () => {\n      myPrescript.value = await getPrescript();\n      const data = await fetchQuestions();\n      questions.value = data;\n    });\n    \n    onUpdated(() => {\n      if (myPrescript.value?.status != 1) {\n        router.push({ name: 'DiagnosticTop' })\n      }\n    })\n   \n    return {\n      myPrescript,\n      questions,\n    };\n  }\n})\n","import { render } from \"./Questionaires.vue?vue&type=template&id=6a91623a\"\nimport script from \"./Questionaires.vue?vue&type=script&lang=ts\"\nexport * from \"./Questionaires.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}